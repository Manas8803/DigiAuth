// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCertificate = `-- name: CreateCertificate :one
INSERT INTO Certificate (WalletId, CredentialId, IssueDate)
VALUES ($1, $2, $3)
RETURNING id, walletid, credentialid, issuedate
`

type CreateCertificateParams struct {
	Walletid     pgtype.Int4
	Credentialid pgtype.Text
	Issuedate    pgtype.Date
}

func (q *Queries) CreateCertificate(ctx context.Context, arg CreateCertificateParams) (Certificate, error) {
	row := q.db.QueryRow(ctx, createCertificate, arg.Walletid, arg.Credentialid, arg.Issuedate)
	var i Certificate
	err := row.Scan(
		&i.ID,
		&i.Walletid,
		&i.Credentialid,
		&i.Issuedate,
	)
	return i, err
}

const createWallet = `-- name: CreateWallet :one
INSERT INTO Wallet (Did, Email)
VALUES ($1, $2)
RETURNING id, did, email
`

type CreateWalletParams struct {
	Did   string
	Email string
}

func (q *Queries) CreateWallet(ctx context.Context, arg CreateWalletParams) (Wallet, error) {
	row := q.db.QueryRow(ctx, createWallet, arg.Did, arg.Email)
	var i Wallet
	err := row.Scan(&i.ID, &i.Did, &i.Email)
	return i, err
}
